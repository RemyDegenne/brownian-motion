import Mathlib.Order.Filter.AtTopBot.Basic
import Mathlib.Topology.Order.WithTop

open Set
open scoped Topology

namespace Filter

variable {Œπ : Type*}

theorem Tendsto.min_atTop_atTop {Œ± Œ≤ : Type*}
    [Nonempty Œ≤] [LinearOrder Œ≤] [LinearOrder Œ±]
    {f g : Œ≤ ‚Üí Œ±} (hf : Tendsto f atTop atTop) (hg : Tendsto g atTop atTop) :
    Tendsto (fun x ‚Ü¶ f x ‚äì g x) atTop atTop := by
  rw [Filter.tendsto_atTop_atTop] at *
  exact fun a ‚Ü¶ let ‚ü®b‚ÇÅ, hb‚ÇÅ‚ü© := hf a; let ‚ü®b‚ÇÇ, hb‚ÇÇ‚ü© := hg a
    ‚ü®max b‚ÇÅ b‚ÇÇ, fun B hB ‚Ü¶ le_min (hb‚ÇÅ _ (max_le_iff.1 hB).1) (hb‚ÇÇ _ (max_le_iff.1 hB).2)‚ü©

lemma _root_.WithTop.tendsto_nhds_top_iff {Œ± : Type*}
    [Nonempty Œπ] [LinearOrder Œπ] [TopologicalSpace Œπ] [OrderTopology Œπ] {f : Filter Œ±}
    (x : Œ± ‚Üí WithTop Œπ) :
    Tendsto x f (ùìù ‚ä§) ‚Üî ‚àÄ (i : Œπ), ‚àÄ·∂† (a : Œ±) in f, i < x a := by
  refine nhds_top_basis.tendsto_right_iff.trans ?_
  simp only [Set.mem_Ioi]
  refine ‚ü®fun h i ‚Ü¶ h i trivial, fun h i hi ‚Ü¶ ?_‚ü©
  specialize h (i.untop hi.ne)
  filter_upwards [h] with a ha
  simpa using ha

lemma _root_.WithTop.tendsto_atTop_nhds_top_iff {Œ± : Type*}
    [Nonempty Œπ] [LinearOrder Œπ] [TopologicalSpace Œπ] [OrderTopology Œπ]
    [Nonempty Œ±] [inst : Preorder Œ±] [IsDirected Œ± fun x1 x2 ‚Ü¶ x1 ‚â§ x2] (x : Œ± ‚Üí WithTop Œπ) :
    Tendsto x atTop (ùìù ‚ä§) ‚Üî ‚àÄ (i : Œπ), ‚àÉ N, ‚àÄ n ‚â• N, i < x n := by
  rw [WithTop.tendsto_nhds_top_iff]
  simp only [eventually_atTop, ge_iff_le]

lemma Tendsto.tendsto_withTop_atTop_nhds_top
    [Nonempty Œπ] [LinearOrder Œπ] [NoMaxOrder Œπ] [TopologicalSpace Œπ] [OrderTopology Œπ]
    {a : ‚Ñï ‚Üí Œπ} (ha : Tendsto a atTop atTop) :
    Tendsto (fun n ‚Ü¶ (a n : WithTop Œπ)) atTop (ùìù ‚ä§) := by
  rw [WithTop.tendsto_atTop_nhds_top_iff]
  rw [tendsto_atTop_atTop] at ha
  norm_cast
  intro i
  obtain ‚ü®i', hi'‚ü© := NoMaxOrder.exists_gt i
  obtain ‚ü®j, hj‚ü© := ha i'
  exact ‚ü®j, fun n hn ‚Ü¶ lt_of_lt_of_le hi' <| hj _ hn‚ü©

end Filter
